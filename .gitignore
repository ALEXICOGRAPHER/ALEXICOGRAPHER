

const fs = require('fs');
const path = require('path');

// Helper function to write a file and create folders as needed
function writeFile(filePath, content) {
  const dir = path.dirname(filePath);
  fs.mkdirSync(dir, { recursive: true });
  fs.writeFileSync(filePath, content, 'utf8');
}

const files = [

  // .gitignore
  {
    path: 'empyrean-backend/.gitignore',
    content: `
node_modules
uploads
.env
.DS_Store
  `
  },

  // README.md
  {
    path: 'empyrean-backend/README.md',
    content: `
# EMPYREAN APP Backend

A humanitarian platform backend built with Node.js, Express, MongoDB, JWT, Docker.

## Features

- User authentication (signup, login, password reset, email verification)
- Admin dashboard (manage users, posts, analytics)
- Posts, comments, e-commerce projects
- Notifications
- File/media upload
- Docker support

## Quick Start

\`\`\`bash
# Copy .env.example and fill values
cp .env.example .env

# Local (Node.js)
npm install
npm start

# Docker
docker-compose up --build
\`\`\`

API runs at \`http://localhost:5000/api\`

## Folder Structure

- \`/models\` - Mongoose schemas
- \`/routes\` - Express routers
- \`/controllers\` - Logic for endpoints
- \`/middleware\` - Auth, admin, upload, notifications
- \`/utils\` - Email, analytics, etc.

## Environment Variables

See \`.env.example\` for required keys.

## License

MIT
    `
  },

  // .env.example
  {
    path: 'empyrean-backend/.env.example',
    content: `
MONGO_URI=your_mongodb_uri
JWT_SECRET=your_jwt_secret
EMAIL_USER=your_email@example.com
EMAIL_PASS=your_email_password
EMAIL_HOST=smtp.example.com
EMAIL_PORT=587
ADMIN_EMAIL=admin@empyrean.org
    `
  },

  // Dockerfile
  {
    path: 'empyrean-backend/Dockerfile',
    content: `
FROM node:18

WORKDIR /app

COPY package*.json ./
RUN npm install

COPY . .

EXPOSE 5000

CMD ["npm", "start"]
    `
  },

  // docker-compose.yml
  {
    path: 'empyrean-backend/docker-compose.yml',
    content: `
version: '3'
services:
  app:
    build: .
    ports:
      - "5000:5000"
    env_file:
      - .env
    volumes:
      - .:/app
      - ./uploads:/app/uploads
    depends_on:
      - mongo
  mongo:
    image: mongo
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
volumes:
  mongo_data:
    `
  },

  // package.json
  {
    path: 'empyrean-backend/package.json',
    content: `
{
  "name": "empyrean-backend",
  "version": "1.0.0",
  "main": "app.js",
  "scripts": {
    "start": "node app.js",
    "dev": "nodemon app.js"
  },
  "dependencies": {
    "bcryptjs": "^2.4.3",
    "cors": "^2.8.5",
    "dotenv": "^16.3.1",
    "express": "^4.18.2",
    "jsonwebtoken": "^9.0.2",
    "mongoose": "^8.2.1",
    "multer": "^1.4.5-lts.1",
    "nodemailer": "^6.9.11"
  },
  "devDependencies": {
    "nodemon": "^3.1.0"
  }
}
    `
  },

  // app.js
  {
    path: 'empyrean-backend/app.js',
    content: `
const express = require('express');
const mongoose = require('mongoose');
const dotenv = require('dotenv');
const cors = require('cors');
const path = require('path');

dotenv.config();

const authRoutes = require('./routes/auth');
const postRoutes = require('./routes/posts');
const projectRoutes = require('./routes/projects');
const commentRoutes = require('./routes/comments');
const userRoutes = require('./routes/users');
const adminRoutes = require('./routes/admin');
const notificationRoutes = require('./routes/notifications');

const app = express();
app.use(cors());
app.use(express.json());
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

app.use('/api/auth', authRoutes);
app.use('/api/posts', postRoutes);
app.use('/api/projects', projectRoutes);
app.use('/api/comments', commentRoutes);
app.use('/api/users', userRoutes);
app.use('/api/admin', adminRoutes);
app.use('/api/notifications', notificationRoutes);

mongoose.connect(process.env.MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true })
.then(() => {
    console.log('MongoDB Connected');
    app.listen(5000, () => console.log('Server running on port 5000'));
})
.catch(err => console.error(err));
    `
  },

  // Middleware
  {
    path: 'empyrean-backend/middleware/auth.js',
    content: `
const jwt = require('jsonwebtoken');
const User = require('../models/User');

module.exports = async (req, res, next) => {
  const token = req.headers['authorization']?.split(' ')[1];
  if (!token) return res.status(401).json({ error: 'No token' });
  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    req.user = await User.findById(decoded.id).select('-password');
    next();
  } catch (err) {
    res.status(401).json({ error: 'Invalid token' });
  }
};
    `
  },
  {
    path: 'empyrean-backend/middleware/admin.js',
    content: `
module.exports = (req, res, next) => {
  if (!req.user || req.user.email !== process.env.ADMIN_EMAIL) {
    return res.status(403).json({ error: 'Admin only' });
  }
  next();
};
    `
  },

  // Models
  {
    path: 'empyrean-backend/models/User.js',
    content: `
const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
  name: String,
  email: { type: String, unique: true },
  password: String,
  type: { type: String, enum: ['individual', 'organization', 'cooperative'] },
  avatar: String,
  verified: { type: Boolean, default: false },
  emailToken: String,
  resetToken: String
}, { timestamps: true });

module.exports = mongoose.model('User', userSchema);
    `
  },
  {
    path: 'empyrean-backend/models/Post.js',
    content: `
const mongoose = require('mongoose');

const postSchema = new mongoose.Schema({
  user: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
  type: String,
  content: String,
  media: [String],
  location: String,
  comments: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Comment' }],
  supports: [{ type: mongoose.Schema.Types.ObjectId, ref: 'User' }],
  meta: mongoose.Schema.Types.Mixed
}, { timestamps: true });

module.exports = mongoose.model('Post', postSchema);
    `
  },
  {
    path: 'empyrean-backend/models/Project.js',
    content: `
const mongoose = require('mongoose');

const projectSchema = new mongoose.Schema({
  organizer: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
  title: String,
  description: String,
  image: String,
  location: String,
  goal: Number,
  raised: { type: Number, default: 0 },
  supporters: [{ type: mongoose.Schema.Types.ObjectId, ref: 'User' }],
  meta: mongoose.Schema.Types.Mixed
}, { timestamps: true });

module.exports = mongoose.model('Project', projectSchema);
    `
  },
  {
    path: 'empyrean-backend/models/Comment.js',
    content: `
const mongoose = require('mongoose');

const commentSchema = new mongoose.Schema({
  user: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
  post: { type: mongoose.Schema.Types.ObjectId, ref: 'Post' },
  content: String
}, { timestamps: true });

module.exports = mongoose.model('Comment', commentSchema);
    `
  },
  {
    path: 'empyrean-backend/models/Notification.js',
    content: `
const mongoose = require('mongoose');

const notificationSchema = new mongoose.Schema({
  user: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
  message: String,
  read: { type: Boolean, default: false },
  link: String,
}, { timestamps: true });

module.exports = mongoose.model('Notification', notificationSchema);
    `
  },

  // Utils
  {
    path: 'empyrean-backend/utils/email.js',
    content: `
const nodemailer = require('nodemailer');

const transporter = nodemailer.createTransport({
  host: process.env.EMAIL_HOST,
  port: process.env.EMAIL_PORT,
  secure: false,
  auth: {
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_PASS
  }
});

exports.sendMail = (to, subject, html) => {
  return transporter.sendMail({
    from: process.env.EMAIL_USER,
    to,
    subject,
    html
  });
};
    `
  },

  // Controllers (sample for core features)
  {
    path: 'empyrean-backend/controllers/authController.js',
    content: `
// Auth controller: signup, login, email verify, password reset
const User = require('../models/User');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const { sendMail } = require('../utils/email');
const crypto = require('crypto');

exports.signup = async (req, res) => {
  try {
    const { name, email, password, type } = req.body;
    const hashed = await bcrypt.hash(password, 10);
    const emailToken = crypto.randomBytes(32).toString('hex');
    const user = new User({ name, email, password: hashed, type, emailToken });
    await user.save();
    // Send verification email
    const verifyUrl = \`\${req.protocol}://\${req.get('host')}/api/auth/verify/\${emailToken}\`;
    await sendMail(email, 'Verify your EMPYREAN account', \`<a href="\${verifyUrl}">Verify your email</a>\`);
    res.json({ message: 'Registered! Check your email to verify.' });
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
};

exports.verifyEmail = async (req, res) => {
  try {
    const user = await User.findOne({ emailToken: req.params.token });
    if (!user) return res.status(400).json({ error: 'Invalid token' });
    user.verified = true;
    user.emailToken = undefined;
    await user.save();
    res.json({ message: 'Email verified!' });
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
};

exports.login = async (req, res) => {
  try {
    const { email, password } = req.body;
    const user = await User.findOne({ email });
    if (!user) return res.status(401).json({ error: 'Invalid credentials' });
    if (!user.verified) return res.status(403).json({ error: 'Email not verified' });
    const match = await bcrypt.compare(password, user.password);
    if (!match) return res.status(401).json({ error: 'Invalid credentials' });
    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '7d' });
    res.json({ token, user });
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
};

exports.forgotPassword = async (req, res) => {
  try {
    const { email } = req.body;
    const user = await User.findOne({ email });
    if (!user) return res.status(400).json({ error: 'No user' });
    const resetToken = crypto.randomBytes(32).toString('hex');
    user.resetToken = resetToken;
    await user.save();
    const resetUrl = \`\${req.protocol}://\${req.get('host')}/api/auth/reset/\${resetToken}\`;
    await sendMail(email, 'Reset your EMPYREAN password', \`<a href="\${resetUrl}">Reset Password</a>\`);
    res.json({ message: 'Reset email sent' });
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
};

exports.resetPassword = async (req, res) => {
  try {
    const { password } = req.body;
    const user = await User.findOne({ resetToken: req.params.token });
    if (!user) return res.status(400).json({ error: 'Invalid token' });
    user.password = await bcrypt.hash(password, 10);
    user.resetToken = undefined;
    await user.save();
    res.json({ message: 'Password updated' });
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
};
    `
  },
  {
    path: 'empyrean-backend/controllers/postController.js',
    content: `
const Post = require('../models/Post');
const Comment = require('../models/Comment');

exports.createPost = async (req, res) => {
  try {
    const { type, content, location, meta } = req.body;
    let media = [];
    if (req.files) {
      media = req.files.map(file => '/uploads/' + file.filename);
    }
    const post = new Post({ user: req.user._id, type, content, media, location, meta });
    await post.save();
    res.json(post);
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
};

exports.getPosts = async (req, res) => {
  try {
    const posts = await Post.find().populate('user').populate('comments').sort({ createdAt: -1 }).limit(100);
    res.json(posts);
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
};

exports.getPostById = async (req, res) => {
  try {
    const post = await Post.findById(req.params.id).populate('user').populate('comments');
    if (!post) return res.status(404).json({ error: 'Not found' });
    res.json(post);
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
};

exports.supportPost = async (req, res) => {
  try {
    const post = await Post.findById(req.params.id);
    if (!post.supports.includes(req.user._id)) post.supports.push(req.user._id);
    await post.save();
    res.json(post);
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
};
    `
  },
  {
    path: 'empyrean-backend/controllers/projectController.js',
    content: `
const Project = require('../models/Project');

exports.createProject = async (req, res) => {
  try {
    const { title, description, location, goal, meta } = req.body;
    let image = "";
    if (req.file) image = '/uploads/' + req.file.filename;
    const project = new Project({
      organizer: req.user._id,
      title, description, image, location, goal, meta
    });
    await project.save();
    res.json(project);
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
};

exports.getProjects = async (req, res) => {
  try {
    const projects = await Project.find().populate('organizer').sort({ createdAt: -1 }).limit(100);
    res.json(projects);
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
};
    `
  },
  {
    path: 'empyrean-backend/controllers/commentController.js',
    content: `
const Comment = require('../models/Comment');
const Post = require('../models/Post');

exports.createComment = async (req, res) => {
  try {
    const { postId, content } = req.body;
    const comment = new Comment({ user: req.user._id, post: postId, content });
    await comment.save();
    // Add comment to post
    await Post.findByIdAndUpdate(postId, { $push: { comments: comment._id } });
    res.json(comment);
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
};
    `
  },
  {
    path: 'empyrean-backend/controllers/userController.js',
    content: `
const User = require('../models/User');

exports.getProfile = async (req, res) => {
  res.json(req.user);
};
    `
  },
  {
    path: 'empyrean-backend/controllers/adminController.js',
    content: `
const User = require('../models/User');
const Post = require('../models/Post');

exports.dashboard = async (req, res) => {
  const users = await User.countDocuments();
  const posts = await Post.countDocuments();
  res.json({ users, posts });
};

exports.getUsers = async (req, res) => {
  const users = await User.find().select('-password').limit(100);
  res.json(users);
};

exports.getPosts = async (req, res) => {
  const posts = await Post.find().populate('user').limit(100);
  res.json(posts);
};
    `
  },
  {
    path: 'empyrean-backend/controllers/notificationController.js',
    content: `
const Notification = require('../models/Notification');

exports.getNotifications = async (req, res) => {
  const notifications = await Notification.find({ user: req.user._id }).sort({ createdAt: -1 }).limit(50);
  res.json(notifications);
};

exports.markRead = async (req, res) => {
  await Notification.updateMany({ user: req.user._id, read: false }, { $set: { read: true } });
  res.json({ message: 'All notifications marked as read' });
};
    `
  },

  // Routes
  {
    path: 'empyrean-backend/routes/auth.js',
    content: `
const express = require('express');
const router = express.Router();
const ctrl = require('../controllers/authController');

router.post('/signup', ctrl.signup);
router.get('/verify/:token', ctrl.verifyEmail);
router.post('/login', ctrl.login);
router.post('/forgot', ctrl.forgotPassword);
router.post('/reset/:token', ctrl.resetPassword);

module.exports = router;
    `
  },
  {
    path: 'empyrean-backend/routes/posts.js',
    content: `
const express = require('express');
const router = express.Router();
const ctrl = require('../controllers/postController');
const auth = require('../middleware/auth');
const multer = require('multer');
const upload = multer({ dest: 'uploads/' });

router.get('/', ctrl.getPosts);
router.get('/:id', ctrl.getPostById);
router.post('/', auth, upload.array('media'), ctrl.createPost);
router.post('/:id/support', auth, ctrl.supportPost);

module.exports = router;
    `
  },
  {
    path: 'empyrean-backend/routes/projects.js',
    content: `
const express = require('express');
const router = express.Router();
const ctrl = require('../controllers/projectController');
const auth = require('../middleware/auth');
const multer = require('multer');
const upload = multer({ dest: 'uploads/' });

router.get('/', ctrl.getProjects);
router.post('/', auth, upload.single('image'), ctrl.createProject);

module.exports = router;
    `
  },
  {
    path: 'empyrean-backend/routes/comments.js',
    content: `
const express = require('express');
const router = express.Router();
const ctrl = require('../controllers/commentController');
const auth = require('../middleware/auth');

router.post('/', auth, ctrl.createComment);

module.exports = router;
    `
  },
  {
    path: 'empyrean-backend/routes/users.js',
    content: `
const express = require('express');
const router = express.Router();
const ctrl = require('../controllers/userController');
const auth = require('../middleware/auth');

router.get('/me', auth, ctrl.getProfile);

module.exports = router;
    `
  },
  {
    path: 'empyrean-backend/routes/admin.js',
    content: `
const express = require('express');
const router = express.Router();
const ctrl = require('../controllers/adminController');
const auth = require('../middleware/auth');
const admin = require('../middleware/admin');

router.get('/dashboard', auth, admin, ctrl.dashboard);
router.get('/users', auth, admin, ctrl.getUsers);
router.get('/posts', auth, admin, ctrl.getPosts);

module.exports = router;
    `
  },
  {
    path: 'empyrean-backend/routes/notifications.js',
    content: `
const express = require('express');
const router = express.Router();
const ctrl = require('../controllers/notificationController');
const auth = require('../middleware/auth');

router.get('/', auth, ctrl.getNotifications);
router.post('/markread', auth, ctrl.markRead);

module.exports = router;
    `
  }
];

// Write all files!
for (const file of files) {
  writeFile(file.path, file.content.trimStart());
}

console.log('EMPYREAN APP backend generated in ./empyrean-backend/');